Fixtures are functions that are run by pytest before (and sometimes after) the actual test functions. The code in the fixture can do whatever you want it to. You can use fixtures to get a data set for the tests to work on. You can use fixtures to get a system into a known state before running a test. Fixtures are also used to get data ready for multiple tests.

test fixtures refer to the mechanism pytest provides to allow the separation of “getting ready for” and “cleaning up after” code from your test functions.

Sharing Fixtures Through conftest.py:
=====================================
You can put fixtures into individual test files, but to share fixtures among multiple test files, you need to use a conftest.py file somewhere centrally located for all of the tests.

Likewise, you can have other conftest.py files in subdirectories of the top tests directory. If you do, fixtures defined in these lower-level conftest.py files will be available to tests in that directory and subdirectories.

Tracing Fixture Execution with –setup-show
==========================================
When I’m developing fixtures, I like to see what’s running and when. Fortunately, pytest provides a command-line flag, --setup-show

Using Fixtures for Test Data
============================
Fixtures are a great place to store data to use for testing. You can return anything.

Specifying Fixture Scope
===========================
Fixtures include an optional parameter called scope, which controls how often a fixture gets set up and torn down. The scope parameter to @pytest.fixture() can have the values of function, class, module, or session. The default scope is function. The tasks_db fixture and all of the fixtures so far don’t specify a scope. Therefore, they are function scope fixtures.

Here’s a rundown of each scope value:

scope=’function’
Run once per test function. The setup portion is run before each test using the fixture. The teardown portion is run after each test using the fixture. This is the default scope used when no scope parameter is specified.

scope=’class’
Run once per test class, regardless of how many test methods are in the class

scope=’module’
Run once per module, regardless of how many test functions or methods or other fixtures in the module use it.

scope=’session’
Run once per session. All test methods and functions using a fixture of session scope share one setup and teardown call.

Specifying Fixtures with usefixtures
========================================
So far, if you wanted a test to use a fixture, you put it in the parameter list. You can also mark a test or a class with @pytest.mark.usefixtures(’fixture1’, ’fixture2’). usefixtures takes a string that is composed of a comma-separated list of fixtures to use. It doesn’t make sense to do this with test functions—it’s just more typing. But it does work well for test classes.

Using usefixtures is almost the same as specifying the fixture name in the test method parameter list. The one difference is that the test can use the return value of a fixture only if it’s specified in the parameter list. A test using a fixture due to usefixtures cannot use the fixture’s return value.

Builtin Fixtures
==================
The builtin fixtures that come prepackaged with pytest can help you do some pretty useful things in your tests easily and consistently. For example, in addition to handling temporary files, pytest includes builtin fixtures to access command-line options, communicate between tests sessions, validate output streams, modify environmental variables, and interrogate warnings. The builtin fixtures are extensions to the core functionality of pytest
